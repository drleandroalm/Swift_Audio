program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "3500.14.1"}, {"coremlc-version", "3500.32.1"}, {"coremltools-component-torch", "2.8.0"}, {"coremltools-source-dialect", "TorchScript"}, {"coremltools-version", "9.0b1"}})]
{
    func main<ios17>(tensor<fp32, [1, 1, 160000]> audio) {
            tensor<fp32, [1]> sincnet_wav_norm1d_bias = const()[name = tensor<string, []>("sincnet_wav_norm1d_bias"), val = tensor<fp32, [1]>([0x1.73505ep-5])];
            tensor<fp32, [1]> sincnet_wav_norm1d_weight = const()[name = tensor<string, []>("sincnet_wav_norm1d_weight"), val = tensor<fp32, [1]>([0x1.43f862p-7])];
            tensor<fp32, [80]> sincnet_norm1d_0_bias = const()[name = tensor<string, []>("sincnet_norm1d_0_bias"), val = tensor<fp32, [80]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp32, [80]> sincnet_norm1d_0_weight = const()[name = tensor<string, []>("sincnet_norm1d_0_weight"), val = tensor<fp32, [80]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(448)))];
            tensor<fp32, [60]> sincnet_conv1d_1_bias = const()[name = tensor<string, []>("sincnet_conv1d_1_bias"), val = tensor<fp32, [60]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(832)))];
            tensor<fp32, [60, 80, 5]> sincnet_conv1d_1_weight = const()[name = tensor<string, []>("sincnet_conv1d_1_weight"), val = tensor<fp32, [60, 80, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1152)))];
            tensor<fp32, [60]> sincnet_norm1d_1_bias = const()[name = tensor<string, []>("sincnet_norm1d_1_bias"), val = tensor<fp32, [60]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(97216)))];
            tensor<fp32, [60]> sincnet_norm1d_1_weight = const()[name = tensor<string, []>("sincnet_norm1d_1_weight"), val = tensor<fp32, [60]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(97536)))];
            tensor<fp32, [60]> sincnet_conv1d_2_bias = const()[name = tensor<string, []>("sincnet_conv1d_2_bias"), val = tensor<fp32, [60]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(97856)))];
            tensor<fp32, [60, 60, 5]> sincnet_conv1d_2_weight = const()[name = tensor<string, []>("sincnet_conv1d_2_weight"), val = tensor<fp32, [60, 60, 5]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(98176)))];
            tensor<fp32, [60]> sincnet_norm1d_2_bias = const()[name = tensor<string, []>("sincnet_norm1d_2_bias"), val = tensor<fp32, [60]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(170240)))];
            tensor<fp32, [60]> sincnet_norm1d_2_weight = const()[name = tensor<string, []>("sincnet_norm1d_2_weight"), val = tensor<fp32, [60]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(170560)))];
            tensor<fp32, [128]> linear_0_bias = const()[name = tensor<string, []>("linear_0_bias"), val = tensor<fp32, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(170880)))];
            tensor<fp32, [128, 256]> linear_0_weight = const()[name = tensor<string, []>("linear_0_weight"), val = tensor<fp32, [128, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(171456)))];
            tensor<fp32, [128]> linear_1_bias = const()[name = tensor<string, []>("linear_1_bias"), val = tensor<fp32, [128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(302592)))];
            tensor<fp32, [128, 128]> linear_1_weight = const()[name = tensor<string, []>("linear_1_weight"), val = tensor<fp32, [128, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(303168)))];
            tensor<fp32, [7]> classifier_bias = const()[name = tensor<string, []>("classifier_bias"), val = tensor<fp32, [7]>([-0x1.00e888p+0, 0x1.67cb52p-2, 0x1.3d87fp-1, 0x1.c8aa8p-2, -0x1.445f5ep-2, -0x1.591274p-1, -0x1.8fb70ep-2])];
            tensor<fp32, [7, 128]> classifier_weight = const()[name = tensor<string, []>("classifier_weight"), val = tensor<fp32, [7, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(368768)))];
            tensor<fp32, []> var_9 = const()[name = tensor<string, []>("op_9"), val = tensor<fp32, []>(0x1.47ae14p-7)];
            tensor<fp32, []> var_24 = const()[name = tensor<string, []>("op_24"), val = tensor<fp32, []>(0x1.4f8b58p-17)];
            tensor<fp32, [1, 1, 160000]> waveform = instance_norm(beta = sincnet_wav_norm1d_bias, epsilon = var_24, gamma = sincnet_wav_norm1d_weight, x = audio)[name = tensor<string, []>("waveform")];
            tensor<fp32, [80, 1, 251]> filters = const()[name = tensor<string, []>("filters"), val = tensor<fp32, [80, 1, 251]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(372416)))];
            tensor<string, []> outputs_pad_type_0 = const()[name = tensor<string, []>("outputs_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> outputs_strides_0 = const()[name = tensor<string, []>("outputs_strides_0"), val = tensor<int32, [1]>([10])];
            tensor<int32, [2]> outputs_pad_0 = const()[name = tensor<string, []>("outputs_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> outputs_dilations_0 = const()[name = tensor<string, []>("outputs_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> outputs_groups_0 = const()[name = tensor<string, []>("outputs_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp32, [1, 80, 15975]> outputs = conv(dilations = outputs_dilations_0, groups = outputs_groups_0, pad = outputs_pad_0, pad_type = outputs_pad_type_0, strides = outputs_strides_0, weight = filters, x = waveform)[name = tensor<string, []>("outputs")];
            tensor<fp32, [1, 80, 15975]> input_1 = abs(x = outputs)[name = tensor<string, []>("input_1")];
            tensor<int32, [1]> var_119 = const()[name = tensor<string, []>("op_119"), val = tensor<int32, [1]>([3])];
            tensor<int32, [1]> var_120 = const()[name = tensor<string, []>("op_120"), val = tensor<int32, [1]>([3])];
            tensor<string, []> input_3_pad_type_0 = const()[name = tensor<string, []>("input_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_3_pad_0 = const()[name = tensor<string, []>("input_3_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<bool, []> input_3_ceil_mode_0 = const()[name = tensor<string, []>("input_3_ceil_mode_0"), val = tensor<bool, []>(false)];
            tensor<fp32, [1, 80, 5325]> input_3 = max_pool(ceil_mode = input_3_ceil_mode_0, kernel_sizes = var_119, pad = input_3_pad_0, pad_type = input_3_pad_type_0, strides = var_120, x = input_1)[name = tensor<string, []>("input_3")];
            tensor<fp32, [1, 80, 5325]> input_5 = instance_norm(beta = sincnet_norm1d_0_bias, epsilon = var_24, gamma = sincnet_norm1d_0_weight, x = input_3)[name = tensor<string, []>("input_5")];
            tensor<fp32, [1, 80, 5325]> input_7 = leaky_relu(alpha = var_9, x = input_5)[name = tensor<string, []>("input_7")];
            tensor<string, []> input_9_pad_type_0 = const()[name = tensor<string, []>("input_9_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_9_strides_0 = const()[name = tensor<string, []>("input_9_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_9_pad_0 = const()[name = tensor<string, []>("input_9_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_9_dilations_0 = const()[name = tensor<string, []>("input_9_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_9_groups_0 = const()[name = tensor<string, []>("input_9_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp32, [1, 60, 5321]> input_9 = conv(bias = sincnet_conv1d_1_bias, dilations = input_9_dilations_0, groups = input_9_groups_0, pad = input_9_pad_0, pad_type = input_9_pad_type_0, strides = input_9_strides_0, weight = sincnet_conv1d_1_weight, x = input_7)[name = tensor<string, []>("input_9")];
            tensor<int32, [1]> var_135 = const()[name = tensor<string, []>("op_135"), val = tensor<int32, [1]>([3])];
            tensor<int32, [1]> var_136 = const()[name = tensor<string, []>("op_136"), val = tensor<int32, [1]>([3])];
            tensor<string, []> input_11_pad_type_0 = const()[name = tensor<string, []>("input_11_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_11_pad_0 = const()[name = tensor<string, []>("input_11_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<bool, []> input_11_ceil_mode_0 = const()[name = tensor<string, []>("input_11_ceil_mode_0"), val = tensor<bool, []>(false)];
            tensor<fp32, [1, 60, 1773]> input_11 = max_pool(ceil_mode = input_11_ceil_mode_0, kernel_sizes = var_135, pad = input_11_pad_0, pad_type = input_11_pad_type_0, strides = var_136, x = input_9)[name = tensor<string, []>("input_11")];
            tensor<fp32, [1, 60, 1773]> input_13 = instance_norm(beta = sincnet_norm1d_1_bias, epsilon = var_24, gamma = sincnet_norm1d_1_weight, x = input_11)[name = tensor<string, []>("input_13")];
            tensor<fp32, [1, 60, 1773]> input_15 = leaky_relu(alpha = var_9, x = input_13)[name = tensor<string, []>("input_15")];
            tensor<string, []> input_17_pad_type_0 = const()[name = tensor<string, []>("input_17_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [1]> input_17_strides_0 = const()[name = tensor<string, []>("input_17_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [2]> input_17_pad_0 = const()[name = tensor<string, []>("input_17_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<int32, [1]> input_17_dilations_0 = const()[name = tensor<string, []>("input_17_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> input_17_groups_0 = const()[name = tensor<string, []>("input_17_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp32, [1, 60, 1769]> input_17 = conv(bias = sincnet_conv1d_2_bias, dilations = input_17_dilations_0, groups = input_17_groups_0, pad = input_17_pad_0, pad_type = input_17_pad_type_0, strides = input_17_strides_0, weight = sincnet_conv1d_2_weight, x = input_15)[name = tensor<string, []>("input_17")];
            tensor<int32, [1]> var_151 = const()[name = tensor<string, []>("op_151"), val = tensor<int32, [1]>([3])];
            tensor<int32, [1]> var_152 = const()[name = tensor<string, []>("op_152"), val = tensor<int32, [1]>([3])];
            tensor<string, []> input_19_pad_type_0 = const()[name = tensor<string, []>("input_19_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> input_19_pad_0 = const()[name = tensor<string, []>("input_19_pad_0"), val = tensor<int32, [2]>([0, 0])];
            tensor<bool, []> input_19_ceil_mode_0 = const()[name = tensor<string, []>("input_19_ceil_mode_0"), val = tensor<bool, []>(false)];
            tensor<fp32, [1, 60, 589]> input_19 = max_pool(ceil_mode = input_19_ceil_mode_0, kernel_sizes = var_151, pad = input_19_pad_0, pad_type = input_19_pad_type_0, strides = var_152, x = input_17)[name = tensor<string, []>("input_19")];
            tensor<fp32, [1, 60, 589]> input_21 = instance_norm(beta = sincnet_norm1d_2_bias, epsilon = var_24, gamma = sincnet_norm1d_2_weight, x = input_19)[name = tensor<string, []>("input_21")];
            tensor<fp32, [1, 60, 589]> x = leaky_relu(alpha = var_9, x = input_21)[name = tensor<string, []>("x")];
            tensor<int32, [3]> transpose_4_perm_0 = const()[name = tensor<string, []>("transpose_4_perm_0"), val = tensor<int32, [3]>([2, 0, 1])];
            tensor<fp32, [512]> add_0 = const()[name = tensor<string, []>("add_0"), val = tensor<fp32, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(452800)))];
            tensor<fp32, [512]> add_1 = const()[name = tensor<string, []>("add_1"), val = tensor<fp32, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(454912)))];
            tensor<fp32, [512, 60]> concat_4 = const()[name = tensor<string, []>("concat_4"), val = tensor<fp32, [512, 60]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(457024)))];
            tensor<fp32, [512, 128]> concat_5 = const()[name = tensor<string, []>("concat_5"), val = tensor<fp32, [512, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(579968)))];
            tensor<fp32, [512, 60]> concat_6 = const()[name = tensor<string, []>("concat_6"), val = tensor<fp32, [512, 60]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(842176)))];
            tensor<fp32, [512, 128]> concat_7 = const()[name = tensor<string, []>("concat_7"), val = tensor<fp32, [512, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(965120)))];
            tensor<fp32, [1, 256]> input_25_lstm_layer_0_lstm_h0_reshaped = const()[name = tensor<string, []>("input_25_lstm_layer_0_lstm_h0_reshaped"), val = tensor<fp32, [1, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1227328)))];
            tensor<string, []> input_25_lstm_layer_0_direction_0 = const()[name = tensor<string, []>("input_25_lstm_layer_0_direction_0"), val = tensor<string, []>("bidirectional")];
            tensor<bool, []> input_25_lstm_layer_0_output_sequence_0 = const()[name = tensor<string, []>("input_25_lstm_layer_0_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> input_25_lstm_layer_0_recurrent_activation_0 = const()[name = tensor<string, []>("input_25_lstm_layer_0_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> input_25_lstm_layer_0_cell_activation_0 = const()[name = tensor<string, []>("input_25_lstm_layer_0_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> input_25_lstm_layer_0_activation_0 = const()[name = tensor<string, []>("input_25_lstm_layer_0_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [589, 1, 60]> transpose_4 = transpose(perm = transpose_4_perm_0, x = x)[name = tensor<string, []>("transpose_6")];
            tensor<fp32, [589, 1, 256]> input_25_lstm_layer_0_0, tensor<fp32, [1, 256]> input_25_lstm_layer_0_1, tensor<fp32, [1, 256]> input_25_lstm_layer_0_2 = lstm(activation = input_25_lstm_layer_0_activation_0, bias = add_0, bias_back = add_1, cell_activation = input_25_lstm_layer_0_cell_activation_0, direction = input_25_lstm_layer_0_direction_0, initial_c = input_25_lstm_layer_0_lstm_h0_reshaped, initial_h = input_25_lstm_layer_0_lstm_h0_reshaped, output_sequence = input_25_lstm_layer_0_output_sequence_0, recurrent_activation = input_25_lstm_layer_0_recurrent_activation_0, weight_hh = concat_5, weight_hh_back = concat_7, weight_ih = concat_4, weight_ih_back = concat_6, x = transpose_4)[name = tensor<string, []>("input_25_lstm_layer_0")];
            tensor<fp32, [512]> add_2 = const()[name = tensor<string, []>("add_2"), val = tensor<fp32, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1228416)))];
            tensor<fp32, [512]> add_3 = const()[name = tensor<string, []>("add_3"), val = tensor<fp32, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1230528)))];
            tensor<fp32, [512, 256]> concat_14 = const()[name = tensor<string, []>("concat_14"), val = tensor<fp32, [512, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1232640)))];
            tensor<fp32, [512, 128]> concat_15 = const()[name = tensor<string, []>("concat_15"), val = tensor<fp32, [512, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1756992)))];
            tensor<fp32, [512, 256]> concat_16 = const()[name = tensor<string, []>("concat_16"), val = tensor<fp32, [512, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2019200)))];
            tensor<fp32, [512, 128]> concat_17 = const()[name = tensor<string, []>("concat_17"), val = tensor<fp32, [512, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2543552)))];
            tensor<string, []> input_25_lstm_layer_1_direction_0 = const()[name = tensor<string, []>("input_25_lstm_layer_1_direction_0"), val = tensor<string, []>("bidirectional")];
            tensor<bool, []> input_25_lstm_layer_1_output_sequence_0 = const()[name = tensor<string, []>("input_25_lstm_layer_1_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> input_25_lstm_layer_1_recurrent_activation_0 = const()[name = tensor<string, []>("input_25_lstm_layer_1_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> input_25_lstm_layer_1_cell_activation_0 = const()[name = tensor<string, []>("input_25_lstm_layer_1_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> input_25_lstm_layer_1_activation_0 = const()[name = tensor<string, []>("input_25_lstm_layer_1_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [589, 1, 256]> input_25_lstm_layer_1_0, tensor<fp32, [1, 256]> input_25_lstm_layer_1_1, tensor<fp32, [1, 256]> input_25_lstm_layer_1_2 = lstm(activation = input_25_lstm_layer_1_activation_0, bias = add_2, bias_back = add_3, cell_activation = input_25_lstm_layer_1_cell_activation_0, direction = input_25_lstm_layer_1_direction_0, initial_c = input_25_lstm_layer_0_lstm_h0_reshaped, initial_h = input_25_lstm_layer_0_lstm_h0_reshaped, output_sequence = input_25_lstm_layer_1_output_sequence_0, recurrent_activation = input_25_lstm_layer_1_recurrent_activation_0, weight_hh = concat_15, weight_hh_back = concat_17, weight_ih = concat_14, weight_ih_back = concat_16, x = input_25_lstm_layer_0_0)[name = tensor<string, []>("input_25_lstm_layer_1")];
            tensor<fp32, [512]> add_4 = const()[name = tensor<string, []>("add_4"), val = tensor<fp32, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2805760)))];
            tensor<fp32, [512]> add_5 = const()[name = tensor<string, []>("add_5"), val = tensor<fp32, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2807872)))];
            tensor<fp32, [512, 256]> concat_24 = const()[name = tensor<string, []>("concat_24"), val = tensor<fp32, [512, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2809984)))];
            tensor<fp32, [512, 128]> concat_25 = const()[name = tensor<string, []>("concat_25"), val = tensor<fp32, [512, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3334336)))];
            tensor<fp32, [512, 256]> concat_26 = const()[name = tensor<string, []>("concat_26"), val = tensor<fp32, [512, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3596544)))];
            tensor<fp32, [512, 128]> concat_27 = const()[name = tensor<string, []>("concat_27"), val = tensor<fp32, [512, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4120896)))];
            tensor<string, []> input_25_lstm_layer_2_direction_0 = const()[name = tensor<string, []>("input_25_lstm_layer_2_direction_0"), val = tensor<string, []>("bidirectional")];
            tensor<bool, []> input_25_lstm_layer_2_output_sequence_0 = const()[name = tensor<string, []>("input_25_lstm_layer_2_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> input_25_lstm_layer_2_recurrent_activation_0 = const()[name = tensor<string, []>("input_25_lstm_layer_2_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> input_25_lstm_layer_2_cell_activation_0 = const()[name = tensor<string, []>("input_25_lstm_layer_2_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> input_25_lstm_layer_2_activation_0 = const()[name = tensor<string, []>("input_25_lstm_layer_2_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [589, 1, 256]> input_25_lstm_layer_2_0, tensor<fp32, [1, 256]> input_25_lstm_layer_2_1, tensor<fp32, [1, 256]> input_25_lstm_layer_2_2 = lstm(activation = input_25_lstm_layer_2_activation_0, bias = add_4, bias_back = add_5, cell_activation = input_25_lstm_layer_2_cell_activation_0, direction = input_25_lstm_layer_2_direction_0, initial_c = input_25_lstm_layer_0_lstm_h0_reshaped, initial_h = input_25_lstm_layer_0_lstm_h0_reshaped, output_sequence = input_25_lstm_layer_2_output_sequence_0, recurrent_activation = input_25_lstm_layer_2_recurrent_activation_0, weight_hh = concat_25, weight_hh_back = concat_27, weight_ih = concat_24, weight_ih_back = concat_26, x = input_25_lstm_layer_1_0)[name = tensor<string, []>("input_25_lstm_layer_2")];
            tensor<fp32, [512]> add_6 = const()[name = tensor<string, []>("add_6"), val = tensor<fp32, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4383104)))];
            tensor<fp32, [512]> add_7 = const()[name = tensor<string, []>("add_7"), val = tensor<fp32, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4385216)))];
            tensor<fp32, [512, 256]> concat_34 = const()[name = tensor<string, []>("concat_34"), val = tensor<fp32, [512, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4387328)))];
            tensor<fp32, [512, 128]> concat_35 = const()[name = tensor<string, []>("concat_35"), val = tensor<fp32, [512, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4911680)))];
            tensor<fp32, [512, 256]> concat_36 = const()[name = tensor<string, []>("concat_36"), val = tensor<fp32, [512, 256]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5173888)))];
            tensor<fp32, [512, 128]> concat_37 = const()[name = tensor<string, []>("concat_37"), val = tensor<fp32, [512, 128]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5698240)))];
            tensor<string, []> input_25_batch_first_direction_0 = const()[name = tensor<string, []>("input_25_batch_first_direction_0"), val = tensor<string, []>("bidirectional")];
            tensor<bool, []> input_25_batch_first_output_sequence_0 = const()[name = tensor<string, []>("input_25_batch_first_output_sequence_0"), val = tensor<bool, []>(true)];
            tensor<string, []> input_25_batch_first_recurrent_activation_0 = const()[name = tensor<string, []>("input_25_batch_first_recurrent_activation_0"), val = tensor<string, []>("sigmoid")];
            tensor<string, []> input_25_batch_first_cell_activation_0 = const()[name = tensor<string, []>("input_25_batch_first_cell_activation_0"), val = tensor<string, []>("tanh")];
            tensor<string, []> input_25_batch_first_activation_0 = const()[name = tensor<string, []>("input_25_batch_first_activation_0"), val = tensor<string, []>("tanh")];
            tensor<fp32, [589, 1, 256]> input_25_batch_first_0, tensor<fp32, [1, 256]> input_25_batch_first_1, tensor<fp32, [1, 256]> input_25_batch_first_2 = lstm(activation = input_25_batch_first_activation_0, bias = add_6, bias_back = add_7, cell_activation = input_25_batch_first_cell_activation_0, direction = input_25_batch_first_direction_0, initial_c = input_25_lstm_layer_0_lstm_h0_reshaped, initial_h = input_25_lstm_layer_0_lstm_h0_reshaped, output_sequence = input_25_batch_first_output_sequence_0, recurrent_activation = input_25_batch_first_recurrent_activation_0, weight_hh = concat_35, weight_hh_back = concat_37, weight_ih = concat_34, weight_ih_back = concat_36, x = input_25_lstm_layer_2_0)[name = tensor<string, []>("input_25_batch_first")];
            tensor<int32, [3]> input_25_perm_0 = const()[name = tensor<string, []>("input_25_perm_0"), val = tensor<int32, [3]>([1, 0, 2])];
            tensor<fp32, [1, 589, 256]> input_25 = transpose(perm = input_25_perm_0, x = input_25_batch_first_0)[name = tensor<string, []>("transpose_5")];
            tensor<fp32, [1, 589, 128]> input_27 = linear(bias = linear_0_bias, weight = linear_0_weight, x = input_25)[name = tensor<string, []>("linear_0")];
            tensor<fp32, []> var_220 = const()[name = tensor<string, []>("op_220"), val = tensor<fp32, []>(0x1.47ae14p-7)];
            tensor<fp32, [1, 589, 128]> input_29 = leaky_relu(alpha = var_220, x = input_27)[name = tensor<string, []>("input_29")];
            tensor<fp32, [1, 589, 128]> input_31 = linear(bias = linear_1_bias, weight = linear_1_weight, x = input_29)[name = tensor<string, []>("linear_1")];
            tensor<fp32, []> var_225 = const()[name = tensor<string, []>("op_225"), val = tensor<fp32, []>(0x1.47ae14p-7)];
            tensor<fp32, [1, 589, 128]> input_33 = leaky_relu(alpha = var_225, x = input_31)[name = tensor<string, []>("input_33")];
            tensor<fp32, [1, 589, 7]> input = linear(bias = classifier_bias, weight = classifier_weight, x = input_33)[name = tensor<string, []>("linear_2")];
            tensor<int32, []> var_231 = const()[name = tensor<string, []>("op_231"), val = tensor<int32, []>(-1)];
            tensor<fp32, [1, 589, 7]> var_232_softmax = softmax(axis = var_231, x = input)[name = tensor<string, []>("op_232_softmax")];
            tensor<fp32, []> var_232_epsilon_0 = const()[name = tensor<string, []>("op_232_epsilon_0"), val = tensor<fp32, []>(0x1p-149)];
            tensor<fp32, [1, 589, 7]> log_probs = log(epsilon = var_232_epsilon_0, x = var_232_softmax)[name = tensor<string, []>("op_232")];
        } -> (log_probs);
}